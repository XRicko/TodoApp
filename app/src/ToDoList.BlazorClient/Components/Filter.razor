@using ToDoList.BlazorClient.Services
@using ToDoList.SharedClientLibrary

@attribute [Authorize]

@inject IStringLocalizer<General> Localizer
@inject IApiInvoker ApiInvoker
@inject Notifier Notifier
@inject StateContainer State

<div class="d-flex">
    <div class="filter">
        <StatusSelector StatusName="@(string.IsNullOrWhiteSpace(State.StatusName) ? @Localizer["Status"] : State.StatusName)"
                        OnStatusChanged="UpdateStatus"/>

        <button class="reset-btn ml-2"
                title="@Localizer["Reset"]"
                @onclick="ResetStatus">
                <i class="oi oi-x"></i>
        </button>
    </div>

    <div class="filter category-filter">
        <div class="dropdown">
            <button id="dropdown-btn"
                    class="custom-dropdown-btn bg-category"
                    data-toggle="dropdown" 
                    aria-haspopup="true"
                    aria-expanded="false">
                #@(string.IsNullOrWhiteSpace(State.CategoryName) ? @Localizer["Category"] : State.CategoryName)
            </button>

            <div class="dropdown-menu dropdown-menu-right category-menu" aria-labelledby="dropdown-btn">
                @foreach (var category in categories.Where(x => x.Name != State.CategoryName))
                {
                    <button class="dropdown-item custom-dropdown-item bg-category" 
                            @onclick="() => UpdateCategory(category.Name)">
                        #@category.Name
                    </button>
                }
            </div>
        </div>

        <button class="reset-btn ml-2"
                title="@Localizer["Reset"]"
                @onclick="ResetCategory">
                <i class="oi oi-x"></i>
        </button>
    </div>
</div>

@code {
    private IEnumerable<CategoryModel> categories = Array.Empty<CategoryModel>();

    protected override async Task OnInitializedAsync() => categories = await ApiInvoker.GetItemsAsync<CategoryModel>(ApiEndpoints.Categories);

    private async Task ResetStatus()
    {
        if (string.IsNullOrWhiteSpace(State.StatusName))
            return;

        State.StatusName = "";
        await Notifier.OnFilterChosen();
    }

    private async Task ResetCategory()
    {
        if (string.IsNullOrWhiteSpace(State.CategoryName))
            return;

        State.CategoryName = "";
        await Notifier.OnFilterChosen();
    }

    private async Task UpdateStatus(StatusModel status)
    {
        State.StatusName = status.Name;
        await Notifier.OnFilterChosen();
    }

    private async Task UpdateCategory(string name)
    {
        State.CategoryName = name;
        await Notifier.OnFilterChosen();
    }
}