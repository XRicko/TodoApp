@implements IDisposable

@inject IApiInvoker ApiInvoker
@inject Notifier Notifier

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="d-flex align-items-center">
            <i class="oi oi-list mr-1"></i>&nbsp;

            @if (ChecklistModel.Name == "Untitled")
            {
                @ChecklistModel.Name
            }
            else
            {
                <EditForm Model="@ChecklistModel"
                          OnValidSubmit="@UpdateChecklist"
                          class="edit-checklist-form">
                    <DataAnnotationsValidator />

                    <InputText @bind-Value="ChecklistModel.Name"
                               @onfocus="SetFocus"
                               class="form-control checklist-name-input" />

                    @if (isInFocus)
                    {
                        <button type="submit"
                                class="border-0 btn-transition btn btn-outline-success">
                            <i class="oi oi-check"></i>
                        </button>
                        <button type="button"
                                class="border-0 btn-transition btn btn-outline-secondary"
                                @onclick="Reset">
                            <i class="oi oi-x"></i>
                        </button>
                    }
                </EditForm>
            }
        </div>

        <div>
            @if (ChecklistModel.Name != "Untitled")
            {
                <form method="post"
                      @onsubmit="async () => await OnDeleteCallback.InvokeAsync(ChecklistModel.Id)"
                      class="d-inline">

                    <button type="submit"
                            class="border-0 btn-transition btn btn-outline-danger">
                        <i class="oi oi-trash"></i>
                    </button>
                </form>
            }
        </div>
    </div>

    <div class="card-body">
        <ul class="nav nav-tabs border-0 mb-2" role="tablist" style="grid-gap: 12px;">
            <li class="nav-item">
                <a class="btn btn-outline-primary active"
                   id="notDone-@ChecklistModel.Id-tab"
                   data-toggle="tab"
                   href="#notDone-@ChecklistModel.Id"
                   role="tab">
                    Active
                    <span class="badge badge-light">
                        @ActiveTodoItems.Count
                    </span>
                </a>
            </li>

            <li class="nav-item">
                <a class="btn btn-outline-secondary"
                   id="done-@ChecklistModel.Id-tab"
                   data-toggle="tab"
                   href="#done-@ChecklistModel.Id"
                   role="tab">
                    Done
                    <span class="badge badge-light">
                        @DoneTodoItems.Count
                    </span>
                </a>
            </li>
        </ul>

        <div class="tab-content">
            <ul class="tab-pane scrollable show active list-group list-group-flush" id="notDone-@ChecklistModel.Id">
                <TodoItemsList TodoItemModels="@ActiveTodoItems" />
            </ul>

            <ul class="tab-pane scrollable list-group list-group-flush" id="done-@ChecklistModel.Id">
                <TodoItemsList TodoItemModels="@DoneTodoItems" />
            </ul>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<int> OnDeleteCallback { get; set; }

    [Parameter]
    public ChecklistModel ChecklistModel { get; set; } = new();

    private string originalName;
    private bool isInFocus;

    private IEnumerable<TodoItemModel> todoItemModels = Array.Empty<TodoItemModel>();

    private ICollection<TodoItemModel> ActiveTodoItems => todoItemModels.Where(x => x.StatusName != "Done").ToList();
    private ICollection<TodoItemModel> DoneTodoItems => todoItemModels.Where(x => x.StatusName == "Done").ToList();

    protected override async Task OnInitializedAsync()
    {
        todoItemModels = await ApiInvoker.GetItemsAsync<TodoItemModel>("TodoItems/GetByChecklistId/" + ChecklistModel.Id);

        originalName = ChecklistModel.Name;
        isInFocus = false;

        Notifier.ChecklistChanged += OnTodoItemsInChecklistChanged;
    }

    private void SetFocus()
    {
        isInFocus = true;
    }

    private void RemoveFocus()
    {
        isInFocus = false;
    }

    private async Task UpdateChecklist()
    {
        await ApiInvoker.PutItemAsync("Checklists", ChecklistModel);
        originalName = ChecklistModel.Name;

        RemoveFocus();
    }

    private void Reset()
    {
        ChecklistModel.Name = originalName;
        RemoveFocus();
    }

    private async Task OnTodoItemsInChecklistChanged(int checklistId)
    {
        await InvokeAsync(async () =>
        {
            if (ChecklistModel.Id == checklistId)
            {
                todoItemModels = await ApiInvoker.GetItemsAsync<TodoItemModel>("TodoItems/GetByChecklistId/" + checklistId);
                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        Notifier.ChecklistChanged -= OnTodoItemsInChecklistChanged;
    }
}
