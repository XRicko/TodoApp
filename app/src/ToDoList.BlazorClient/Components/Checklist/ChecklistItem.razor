@implements IDisposable

@inject IApiInvoker ApiInvoker
@inject Notifier Notifier

<div class="card">
    <div class="card-header d-flex justify-content-between align-items-center">
        <div class="text-capitalize font-weight-normal">
            <i class="oi oi-list"></i>&nbsp;@checklistModel.Name
        </div>

        <div>
            @if (checklistModel.Name != "Untitled")
            {
                <form method="post"
                      @onsubmit="async () => await OnDeleteCallback.InvokeAsync(checklistModel.Id)"
                      class="d-inline">

                    <button type="submit"
                            class="border-0 btn-transition btn btn-outline-danger">
                        <i class="oi oi-trash"></i>
                    </button>
                </form>
            }
        </div>
    </div>

    <div class="card-body">
        <ul class="nav nav-tabs border-0 mb-2" role="tablist" style="grid-gap: 12px;">
            <li class="nav-item">
                <a class="btn btn-outline-primary active"
                   id="notDone-@checklistModel.Id-tab"
                   data-toggle="tab"
                   href="#notDone-@checklistModel.Id"
                   role="tab">
                    Active
                    <span class="badge badge-light">
                        @ActiveTodoItems.Count()
                    </span>
                </a>
            </li>

            <li class="nav-item">
                <a class="btn btn-outline-secondary"
                   id="done-@checklistModel.Id-tab"
                   data-toggle="tab"
                   href="#done-@checklistModel.Id"
                   role="tab">
                    Done
                    <span class="badge badge-light">
                        @DoneTodoItems.Count()
                    </span>
                </a>
            </li>
        </ul>

        <div class="tab-content">
            <ul class="tab-pane show active list-group list-group-flush" id="notDone-@checklistModel.Id">
                <TodoItemsList TodoItemModels="ActiveTodoItems" />
            </ul>

            <ul class="tab-pane list-group list-group-flush" id="done-@checklistModel.Id">
                <TodoItemsList TodoItemModels="DoneTodoItems" />
            </ul>
        </div>
    </div>
</div>

@code {
    //[Parameter]
    //public int ChecklistId { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteCallback { get; set; }

    [Parameter]
    public ChecklistModel checklistModel { get; set; } = new();

    private IEnumerable<TodoItemModel> todoItemModels = Enumerable.Empty<TodoItemModel>();

    private IEnumerable<TodoItemModel> ActiveTodoItems => todoItemModels.Where(x => x.StatusName != "Done").ToList();

    private IEnumerable<TodoItemModel> DoneTodoItems => todoItemModels.Where(x => x.StatusName == "Done").ToList();

    protected override async Task OnInitializedAsync()
    {
        //checklistModel = await ApiInvoker.GetItemAsync<ChecklistModel>("Checklists/" + ChecklistId);
        todoItemModels = await ApiInvoker.GetItemsAsync<TodoItemModel>("TodoItems/GetByChecklistId/" + checklistModel.Id);

        Notifier.ChecklistChanged += OnChecklistChanged;
    }

    private async Task OnChecklistChanged(int checklistId)
    {
        await InvokeAsync(async () =>
        {
            if (checklistModel.Id == checklistId)
            {
                todoItemModels = await ApiInvoker.GetItemsAsync<TodoItemModel>("TodoItems/GetByChecklistId/" + checklistId);
                StateHasChanged();
            }
        });
    }

    public void Dispose()
    {
        Notifier.ChecklistChanged -= OnChecklistChanged;
    }
}
