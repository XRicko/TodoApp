@using ToDoList.SharedClientLibrary

@attribute [Authorize]

@inject IStringLocalizer<General> Localizer
@inject IApiInvoker ApiInvoker

<div class="dropdown">
    <button id="dropdown-btn"
            class="custom-dropdown-btn @StatusModel.GetBackgroundColor(StatusName)"
            data-toggle="dropdown" 
            aria-haspopup="true"
            aria-expanded="false">
        @if (Localizer["Status"] == StatusName)
        {
            @StatusName
        }
        else
        {
            @Localizer[$"{StatusName}Status"]
        }
    </button>

    <div class="dropdown-menu dropdown-menu-right custom-dropdown-menu" aria-labelledby="dropdown-btn">
        @foreach (var status in statuses.Where(x => x.Name != StatusName))
        {
            <button class="dropdown-item custom-dropdown-item @StatusModel.GetBackgroundColor(status.Name)" 
                    @onclick="() => OnStatusChanged.InvokeAsync(status)">
                @Localizer[$"{status.Name}Status"]
            </button>
        }
    </div>
</div>

@code {
    private IEnumerable<StatusModel> statuses = Array.Empty<StatusModel>();

    [Parameter]
    public string StatusName { get; set; }
    [Parameter]
    public EventCallback<StatusModel> OnStatusChanged { get; set; }

    protected override async Task OnInitializedAsync() => statuses = await ApiInvoker.GetItemsAsync<StatusModel>(ApiEndpoints.Statuses);
}