@inject IApiInvoker ApiInvoker
@inject Notifier Notifier

<div class="d-flex flex-column">
    <div class="d-flex align-items-center">
        <div class="form-check">
            <input class="form-check-input"
                   id="todo-item-@TodoItemModel.Id"
                   @onchange="ChangeStatus"
                   type="checkbox"
                   checked="@IsChecked" />
            <label class="form-check-label" for="todo-item-@TodoItemModel.Id">&nbsp;</label>
        </div>

        <EditNameForm TItem="@TodoItemModel"
                      Item="@TodoItemModel"
                      OnValidSubmit="Update" />
    </div>

    <div class="mb-1">
        <Badges StatusName="@TodoItemModel.StatusName"
                CategoryName="@TodoItemModel.CategoryName" />
    </div>

    <a href="http://maps.google.com/?q=@TodoItemModel.Address" target="_blank">@TodoItemModel.Address</a>

    @if (TodoItemModel.ImageContent is not null)
    {
        <img src="data:image;base64,@Convert.ToBase64String(TodoItemModel.ImageContent)"
             class="img-fluid task-image align-self-center" />
    }

    <div class="d-flex justify-content-between align-items-center">
        <div class="text-muted">
            @TodoItemModel.DaysAgo Days ago
        </div>

        <div>
            <form method="post"
                  @onsubmit="Delete"
                  class="d-inline">

                <button type="submit"
                        class="border-0 btn-transition btn btn-outline-danger">
                    <i class="oi oi-trash"></i>
                </button>
            </form>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private IModalService Modal { get; set; }

    private bool? IsChecked => TodoItemModel.StatusName?.Equals("Done");

    [Parameter]
    public TodoItemModel TodoItemModel { get; set; } = new();

    private async Task Delete()
    {
        var result = await Modal.Show<Confirm>("Confirmation").Result;

        if (result.Cancelled)
            return;

        await ApiInvoker.DeleteItemAsync("TodoItems/", TodoItemModel.Id);
        await Notifier.UpdateChecklist(TodoItemModel.ChecklistId);
    }

    private async Task Update() => await ApiInvoker.PutItemAsync("TodoItems", TodoItemModel);


    private async Task ChangeStatus(ChangeEventArgs args)
    {
        StatusModel statusModel = new();

        bool isDone = (bool)args.Value;

        if (isDone)
            statusModel = await ApiInvoker.GetItemAsync<StatusModel>("Statuses/GetByName/Done");
        else
            statusModel = await ApiInvoker.GetItemAsync<StatusModel>("Statuses/GetByName/Ongoing");

        TodoItemModel.StatusId = statusModel.Id;
        TodoItemModel.StatusName = statusModel.Name;

        await ApiInvoker.PutItemAsync("TodoItems", TodoItemModel);
        await Notifier.UpdateChecklist(TodoItemModel.ChecklistId);
    }
}
