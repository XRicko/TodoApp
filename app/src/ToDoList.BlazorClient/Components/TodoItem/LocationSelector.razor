@using Blazored.Modal.Services
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using ToDoList.SharedKernel

@inject IStringLocalizer<General> Localizer

<div style="height: 500px; width: 100%;">
	<GoogleMap @ref="googleMap" Id="map" Height="100%" Options="@options" OnAfterInit="() => OnAfterInitAsync()" />
</div>

<div class="mt-3">
    <button @onclick="Close" class="btn btn-primary">@Localizer["Submit"]</button>
    <button @onclick="Cancel" class="btn btn-secondary">@Localizer["Cancel"]</button>
</div>

@code {

	[CascadingParameter]
	private BlazoredModalInstance BlazoredModal { get; set; }

	[Parameter]
	public GeoCoordinate GeoCoordinate { get; set; }

	private GoogleMap googleMap;
	private Marker marker;

	private MapOptions options;

	protected override void OnInitialized()
	{
		options = new MapOptions
		{
			Zoom = 6,
			Center = new LatLngLiteral
			{
				Lat = GeoCoordinate?.Latitude ?? 50.450001,
				Lng = GeoCoordinate?.Longitude ?? 30.523333
			},
			MapTypeId = MapTypeId.Roadmap
		};
	}

    private async Task OnAfterInitAsync()
	{
		if (GeoCoordinate is not null)
		{
			var latLng = new LatLngLiteral { Lat = GeoCoordinate.Latitude, Lng = GeoCoordinate.Longitude };

			marker = await Marker.CreateAsync(googleMap.JsRuntime, new MarkerOptions
			{
				Map = googleMap.InteropObject,
				Position = latLng
			});
			
			await googleMap.InteropObject.PanTo(latLng);
		}		

		await googleMap.InteropObject.AddListener<MouseEvent>("click", async (e) =>
		{
			if (marker is null)
			{
				marker = await Marker.CreateAsync(googleMap.JsRuntime, new MarkerOptions
				{
					Map = googleMap.InteropObject,
					Position = e.LatLng
				});
			}
			else
				await marker.SetPosition(e.LatLng);

			await googleMap.InteropObject.PanTo(e.LatLng);
		});
	}

    private async Task Close() => await BlazoredModal.CloseAsync(ModalResult.Ok(await marker.GetPosition()));
	private async Task Cancel() => await BlazoredModal.CancelAsync();
}