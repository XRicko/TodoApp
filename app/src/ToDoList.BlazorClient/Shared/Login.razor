@using System.Net.Http
@inject NavigationManager NavManager
@inject IApiInvoker ApiInvoker
@inject IStringLocalizer<General> Localizer

<EditForm EditContext="@editContext" OnSubmit="@Submit">
	<DataAnnotationsValidator />

	<div class="form-row">
		<div class="col">
			<label for="username" class="sr-only">@Localizer["Username"]</label>
			<InputText id="username" class="form-control" @bind-Value="user.Name" placeholder="@Localizer["Username"]" />
		</div>

		<div class="col">
			<label for="password" class="sr-only">@Localizer["Password"]</label>
			<InputText id="password" type="password" class="form-control" @bind-Value="user.Password" placeholder="@Localizer["Password"]" />
		</div>

		@if (!isLoading && string.IsNullOrWhiteSpace(error))
		{
			<div>
				<button type="submit" class="btn btn-success">@Localizer["Log In"]</button>
			</div>
		}
	</div>
</EditForm>

@if (!string.IsNullOrWhiteSpace(error))
{
	<ErrorMessage @bind-Error="error" />
}

@if (isLoading)
{
	<Spinner />
}

@code {
	private UserModel user = new();
	private EditContext editContext;

	private string error;
	private bool isLoading;

	protected override void OnInitialized()
	{
		editContext = new EditContext(user);
		isLoading = false;
	}

	private async Task Submit()
	{
		editContext.Validate();

		var confirmationPasswordMessages = editContext.GetValidationMessages(editContext.Field(nameof(user.ConfirmPassword)));
		var validationMessages = editContext.GetValidationMessages();

		if (validationMessages.All(x => x == confirmationPasswordMessages.FirstOrDefault()))
		{
			isLoading = true;

			try
			{
				_ = await ApiInvoker.AuthenticateUserAsync("Authentication/Login", user);
				isLoading = false;

				NavManager.NavigateTo(NavManager.Uri);
			}
			catch (HttpRequestException e) when (e.StatusCode == System.Net.HttpStatusCode.Unauthorized)
			{
				isLoading = false;
				error = Localizer["Login Failed"];
			}
		}
	}
}