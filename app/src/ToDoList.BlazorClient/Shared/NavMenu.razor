@using ToDoList.BlazorClient.Services
@using ToDoList.SharedClientLibrary

@implements IDisposable

@inject IStringLocalizer<General> Localizer
@inject NavigationManager NavManager
@inject IApiInvoker ApiInvoker
@inject StateContainer State
@inject Notifier Notifier

<div class="top-row pl-4 navbar navbar-dark">
	<a class="navbar-brand" href="">ToDoList.BlazorClient</a>
	<button class="navbar-toggler" @onclick="ToggleNavMenu">
		<span class="navbar-toggler-icon"></span>
	</button>
</div>

<div class="@NavMenuCssClass">
	<AuthorizeView>
		<div class="p-3">
			<SearchInput />
		</div>
	</AuthorizeView>

	<ul class="nav flex-column" @onclick="ToggleNavMenu">
		<li class="nav-item px-3">
			<NavLink class="nav-link" href="" Match="NavLinkMatch.All">
				<span class="oi oi-home" aria-hidden="true"></span> @Localizer["Home"]
			</NavLink>
		</li>

		<AuthorizeView>
			@foreach (var project in State.Projects)
			{
				<li class="nav-item px-3">
					<NavLink class="nav-link" href="@($"project/{project.Id}")">
						<span class="oi oi-pie-chart" aria-hidden="true"></span> @project.Name
					</NavLink>
				</li>
			}
		</AuthorizeView>
	</ul>

	<div class="p-3">
		<CultureSelector />
	</div>

	<div class="text-center p-3">
		<dark-mode-toggle id="dark-mode-toggle-2" mode="dark" appearance="toggle"></dark-mode-toggle>
	</div>
</div>

@code {
	private bool collapseNavMenu = true;

	private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    protected override void OnInitialized()
    {
        Notifier.FilterChosen += OnSearch;
		Notifier.ProjectsChanged += OnProjectsChange;
    }

    private void ToggleNavMenu() => collapseNavMenu = !collapseNavMenu;

	private async Task OnSearch()
    {
		State.Projects = (await ApiInvoker.GetItemsAsync<ProjectModel>(ApiEndpoints.Projects)).ToList();

        if (!string.IsNullOrWhiteSpace(State.SearchTerm))
            State.Projects = State.Projects.FindAll(x => x.Name.Contains(State.SearchTerm, StringComparison.OrdinalIgnoreCase));

        StateHasChanged();
    }

	private async Task OnProjectsChange() => await InvokeAsync(StateHasChanged);

    public void Dispose()
    {
        Notifier.FilterChosen -= OnSearch;
		Notifier.ProjectsChanged -= OnProjectsChange;
    }
}
